{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nexport default function useLocalStorage(key, initialValue) {\n  _s();\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n\n      // Save state\n      setStoredValue(valueToStore);\n\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}\n_s(useLocalStorage, \"9KkFgly4xOWieuYtQLHeKruU9nE=\");","map":{"version":3,"names":["useState","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","log","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["/Users/heinegunther/Desktop/project-exam-2-heine5150/chit-chat-social/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState } from \"react\";\n\nexport default function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n\n      // Save state\n      setStoredValue(valueToStore);\n\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,eAAe,SAASC,eAAe,CAACC,GAAG,EAAEC,YAAY,EAAE;EAAA;EACzD;EACA;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,MAAM;IACnD,IAAI;MACF;MACA,MAAMM,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACP,GAAG,CAAC;;MAE7C;MACA,OAAOI,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,GAAGH,YAAY;IAC/C,CAAC,CAAC,OAAOS,KAAK,EAAE;MACd;MACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,OAAOT,YAAY;IACrB;EACF,CAAC,CAAC;;EAEF;EACA;EACA,MAAMY,QAAQ,GAAIC,KAAK,IAAK;IAC1B,IAAI;MACF;MACA,MAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACZ,WAAW,CAAC,GAAGY,KAAK;;MAExD;MACAX,cAAc,CAACY,YAAY,CAAC;;MAE5B;MACAV,MAAM,CAACC,YAAY,CAACW,OAAO,CAACjB,GAAG,EAAEQ,IAAI,CAACU,SAAS,CAACH,YAAY,CAAC,CAAC;IAChE,CAAC,CAAC,OAAOL,KAAK,EAAE;MACd;MACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;EAED,OAAO,CAACR,WAAW,EAAEW,QAAQ,CAAC;AAChC;AAAC,GArCuBd,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}